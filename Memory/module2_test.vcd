$date
	Sat Nov 18 17:12:13 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module instr_mem_decoder_main_tb $end
$var wire 16 ! source2 [15:0] $end
$var wire 16 " source1 [15:0] $end
$var wire 4 # opcode [3:0] $end
$var reg 16 $ ALU_data [15:0] $end
$var reg 1 % clock $end
$var reg 1 & oeb $end
$var integer 32 ' i [31:0] $end
$scope module MUT $end
$var wire 16 ( ALU_data [15:0] $end
$var wire 1 % clock $end
$var wire 3 ) en [2:0] $end
$var wire 16 * source2 [15:0] $end
$var wire 16 + source1 [15:0] $end
$var wire 4 , select2 [3:0] $end
$var wire 3 - select1 [2:0] $end
$var wire 4 . opcode [3:0] $end
$var wire 16 / inst [15:0] $end
$var wire 3 0 dest [2:0] $end
$var reg 1 1 chip_enable $end
$var reg 2 2 current_state [1:0] $end
$var reg 2 3 next_state [1:0] $end
$var reg 3 4 pc [2:0] $end
$var reg 1 5 rw $end
$var reg 1 6 rw_RAM $end
$scope module ram $end
$var wire 1 1 chip_enable $end
$var wire 16 7 dataIn [15:0] $end
$var wire 3 8 enable [2:0] $end
$var wire 1 6 rw $end
$var wire 3 9 select2 [2:0] $end
$var wire 3 : select1 [2:0] $end
$var reg 16 ; source1 [15:0] $end
$var reg 16 < source2 [15:0] $end
$upscope $end
$scope module rom $end
$var wire 1 5 oeb $end
$var wire 3 = pc [2:0] $end
$var reg 16 > inst [15:0] $end
$var reg 1 ? rw $end
$upscope $end
$scope module split $end
$var wire 16 @ inst [15:0] $end
$var wire 4 A source2 [3:0] $end
$var wire 3 B source [2:0] $end
$var wire 4 C opcd [3:0] $end
$var wire 3 D dest [2:0] $end
$var wire 2 E cond [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 E
b1 D
b1 C
b10 B
b0 A
b10010100000 @
1?
b10010100000 >
b0 =
b1111111111111111 <
b10 ;
b10 :
b0 9
bz 8
bz 7
16
05
b0 4
b10 3
b1 2
11
b1 0
b10010100000 /
b1 .
b10 -
b0 ,
b10 +
b1111111111111111 *
bz )
bz (
b10000 '
1&
1%
b1 $
b1 #
b10 "
b1111111111111111 !
$end
#5
0%
#10
06
b1 4
b1 =
b0 3
b10 2
1%
#15
0%
#20
b10 #
b10 .
b10 C
b1 -
b1 :
b1 B
b100010010000 /
b100010010000 >
b100010010000 @
b1 3
15
b0 2
1%
#25
0%
#30
b1 "
b1 +
b1 ;
b10 3
16
05
b1 2
1%
#35
0%
#40
06
b10 4
b10 =
b0 3
b10 2
1%
#45
0%
#50
b11 #
b11 .
b11 C
b10 -
b10 :
b10 B
b110010100000 /
b110010100000 >
b110010100000 @
b1 3
15
b0 2
1%
#55
0%
#60
b10 "
b10 +
b10 ;
b10 3
16
05
b1 2
1%
#65
0%
#70
06
b11 4
b11 =
b0 3
b10 2
1%
#75
0%
#80
b100 #
b100 .
b100 C
b1000010100000 /
b1000010100000 >
b1000010100000 @
b1 3
15
b0 2
1%
#85
0%
#90
b10 3
16
05
b1 2
1%
#95
0%
#100
06
b100 4
b100 =
b0 3
b10 2
1%
#105
0%
#110
b101 #
b101 .
b101 C
b11 -
b11 :
b11 B
b1 ,
b1 A
b1010010110001 /
b1010010110001 >
b1010010110001 @
b1 3
15
b0 2
1%
#115
0%
#120
b11 "
b11 +
b11 ;
b10 3
16
05
b1 2
1%
#125
0%
#130
06
b101 4
b101 =
b0 3
b10 2
1%
#135
0%
#140
b110 #
b110 .
b110 C
b10 -
b10 :
b10 B
b0 ,
b0 A
b1100010100000 /
b1100010100000 >
b1100010100000 @
b1 3
15
b0 2
1%
#145
0%
#150
b10 "
b10 +
b10 ;
b10 3
16
05
b1 2
1%
#155
0%
#160
06
b110 4
b110 =
b0 3
b10 2
1%
#165
0%
#170
b111 #
b111 .
b111 C
b111 -
b111 :
b111 B
b1 ,
b1 A
b1110011110001 /
b1110011110001 >
b1110011110001 @
b1 3
15
b0 2
1%
#175
0%
#180
b1111111111111111 "
b1111111111111111 +
b1111111111111111 ;
b10 3
16
05
b1 2
1%
#185
0%
#190
06
b111 4
b111 =
b0 3
b10 2
1%
#195
0%
#200
b1 9
b1000 #
b1000 .
b1000 C
b10 -
b10 :
b10 B
b11 ,
b11 A
b10000010100011 /
b10000010100011 >
b10000010100011 @
b1 3
15
b0 2
1%
#205
0%
#210
b1 !
b1 *
b1 <
b10 "
b10 +
b10 ;
b10 3
16
05
b1 2
1%
#215
0%
#220
06
b0 4
b0 =
b0 3
b10 2
1%
#225
0%
#230
b0 9
b1 #
b1 .
b1 C
b0 ,
b0 A
b10010100000 /
b10010100000 >
b10010100000 @
b1 3
15
b0 2
1%
#235
0%
#240
b1111111111111111 !
b1111111111111111 *
b1111111111111111 <
b10 3
16
05
b1 2
1%
#245
0%
#250
06
b1 4
b1 =
b0 3
b10 2
1%
#255
0%
#260
b10 #
b10 .
b10 C
b1 -
b1 :
b1 B
b100010010000 /
b100010010000 >
b100010010000 @
b1 3
15
b0 2
1%
#265
0%
#270
b1 "
b1 +
b1 ;
b10 3
16
05
b1 2
1%
#275
0%
#280
06
b10 4
b10 =
b0 3
b10 2
1%
#285
0%
#290
b11 #
b11 .
b11 C
b10 -
b10 :
b10 B
b110010100000 /
b110010100000 >
b110010100000 @
b1 3
15
b0 2
1%
#295
0%
#300
b10 "
b10 +
b10 ;
b10 3
16
05
b1 2
1%
b1111111111111111 $
